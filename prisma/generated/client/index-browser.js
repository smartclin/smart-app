
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  isAnonymous: 'isAnonymous',
  messageCount: 'messageCount',
  imageCount: 'imageCount',
  lastReset: 'lastReset',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  firstName: 'firstName',
  lastName: 'lastName'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  impersonatedBy: 'impersonatedBy'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  idToken: 'idToken',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  title: 'title',
  archived: 'archived',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  role: 'role',
  content: 'content',
  parts: 'parts',
  imageKey: 'imageKey',
  imageUrl: 'imageUrl',
  userId: 'userId',
  chatId: 'chatId',
  promptId: 'promptId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  createdAt: 'createdAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  phone: 'phone',
  email: 'email',
  maritalStatus: 'maritalStatus',
  nutritionalStatus: 'nutritionalStatus',
  address: 'address',
  emergencyContactName: 'emergencyContactName',
  emergencyContactNumber: 'emergencyContactNumber',
  relation: 'relation',
  bloodGroup: 'bloodGroup',
  allergies: 'allergies',
  medicalConditions: 'medicalConditions',
  medicalHistory: 'medicalHistory',
  insuranceProvider: 'insuranceProvider',
  insuranceNumber: 'insuranceNumber',
  privacyConsent: 'privacyConsent',
  serviceConsent: 'serviceConsent',
  medicalConsent: 'medicalConsent',
  img: 'img',
  colorCode: 'colorCode',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  userId: 'userId',
  specialization: 'specialization',
  licenseNumber: 'licenseNumber',
  phone: 'phone',
  address: 'address',
  department: 'department',
  img: 'img',
  colorCode: 'colorCode',
  availabilityStatus: 'availabilityStatus',
  type: 'type',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkingDaysScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  day: 'day',
  startTime: 'startTime',
  closeTime: 'closeTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  phone: 'phone',
  userId: 'userId',
  address: 'address',
  department: 'department',
  img: 'img',
  licenseNumber: 'licenseNumber',
  colorCode: 'colorCode',
  hireDate: 'hireDate',
  salary: 'salary',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  serviceId: 'serviceId',
  appointmentDate: 'appointmentDate',
  time: 'time',
  status: 'status',
  type: 'type',
  note: 'note',
  reason: 'reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  billId: 'billId',
  patientId: 'patientId',
  appointmentId: 'appointmentId',
  billDate: 'billDate',
  paymentDate: 'paymentDate',
  discount: 'discount',
  totalAmount: 'totalAmount',
  amountPaid: 'amountPaid',
  paymentMethod: 'paymentMethod',
  status: 'status',
  receiptNumber: 'receiptNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientBillsScalarFieldEnum = {
  id: 'id',
  billId: 'billId',
  serviceId: 'serviceId',
  serviceDate: 'serviceDate',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabTestScalarFieldEnum = {
  id: 'id',
  recordId: 'recordId',
  testDate: 'testDate',
  result: 'result',
  status: 'status',
  notes: 'notes',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalRecordsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  appointmentId: 'appointmentId',
  doctorId: 'doctorId',
  treatmentPlan: 'treatmentPlan',
  prescriptions: 'prescriptions',
  labRequest: 'labRequest',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VitalSignsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  medicalId: 'medicalId',
  bodyTemperature: 'bodyTemperature',
  systolic: 'systolic',
  diastolic: 'diastolic',
  heartRate: 'heartRate',
  respiratoryRate: 'respiratoryRate',
  oxygenSaturation: 'oxygenSaturation',
  weight: 'weight',
  height: 'height',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiagnosisScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  medicalId: 'medicalId',
  doctorId: 'doctorId',
  symptoms: 'symptoms',
  diagnosis: 'diagnosis',
  notes: 'notes',
  prescribedMedications: 'prescribedMedications',
  followUpPlan: 'followUpPlan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recordId: 'recordId',
  action: 'action',
  details: 'details',
  model: 'model',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  patientId: 'patientId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  description: 'description',
  price: 'price',
  category: 'category',
  duration: 'duration',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  medicalRecordId: 'medicalRecordId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  medicationName: 'medicationName',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  instructions: 'instructions',
  issuedDate: 'issuedDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VaccinationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  administeredBy: 'administeredBy',
  vaccineName: 'vaccineName',
  vaccineBatchNo: 'vaccineBatchNo',
  administrationRoute: 'administrationRoute',
  siteOfInjection: 'siteOfInjection',
  administeredDate: 'administeredDate',
  nextDueDate: 'nextDueDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WHOGrowthStandardScalarFieldEnum = {
  id: 'id',
  ageInMonths: 'ageInMonths',
  gender: 'gender',
  measurementType: 'measurementType',
  lValue: 'lValue',
  mValue: 'mValue',
  sValue: 'sValue',
  sd0: 'sd0',
  sd1neg: 'sd1neg',
  sd1pos: 'sd1pos',
  sd2neg: 'sd2neg',
  sd2pos: 'sd2pos',
  sd3neg: 'sd3neg',
  sd3pos: 'sd3pos',
  sd4neg: 'sd4neg',
  sd4pos: 'sd4pos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ChatRole = exports.$Enums.ChatRole = {
  USER: 'USER',
  AI: 'AI'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT'
};

exports.JOBTYPE = exports.$Enums.JOBTYPE = {
  FULL: 'FULL',
  PART: 'PART'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DORMANT: 'DORMANT'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  MOBILE: 'MOBILE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  PARTIAL: 'PARTIAL',
  REFUNDED: 'REFUNDED'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  CONSULTATION: 'CONSULTATION',
  LAB_TEST: 'LAB_TEST',
  VACCINATION: 'VACCINATION',
  PROCEDURE: 'PROCEDURE',
  PHARMACY: 'PHARMACY',
  DIAGNOSIS: 'DIAGNOSIS',
  OTHER: 'OTHER'
};

exports.MeasurementType = exports.$Enums.MeasurementType = {
  WFA: 'WFA',
  HFA: 'HFA',
  HcFA: 'HcFA'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Chat: 'Chat',
  Message: 'Message',
  Stream: 'Stream',
  Patient: 'Patient',
  Doctor: 'Doctor',
  WorkingDays: 'WorkingDays',
  Staff: 'Staff',
  Appointment: 'Appointment',
  Payment: 'Payment',
  PatientBills: 'PatientBills',
  LabTest: 'LabTest',
  MedicalRecords: 'MedicalRecords',
  VitalSigns: 'VitalSigns',
  Diagnosis: 'Diagnosis',
  AuditLog: 'AuditLog',
  Rating: 'Rating',
  Services: 'Services',
  Prescription: 'Prescription',
  Vaccination: 'Vaccination',
  WHOGrowthStandard: 'WHOGrowthStandard'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
